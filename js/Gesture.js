// Generated by CoffeeScript 1.12.4
var TouchHistory, Type, currentCentroidX, currentCentroidY, emptyFunction, ref, type;

ref = require("react-native/lib/TouchHistoryMath"), currentCentroidX = ref.currentCentroidX, currentCentroidY = ref.currentCentroidY;

TouchHistory = require("react-native/lib/TouchHistory");

emptyFunction = require("emptyFunction");

Type = require("Type");

type = Type("Gesture");

type.defineArgs(function() {
  return {
    required: true,
    types: {
      target: Number,
      touchHistory: TouchHistory
    }
  };
});

type.defineValues(function(options) {
  var x, y;
  return {
    target: options.target,
    finished: null,
    x: x = currentCentroidX(options.touchHistory),
    y: y = currentCentroidY(options.touchHistory),
    x0: x,
    y0: y,
    dx: 0,
    dy: 0,
    dx0: null,
    dy0: null,
    _touchHistory: options.touchHistory
  };
});

type.defineGetters({
  isActive: function() {
    return this.finished === null;
  },
  touchCount: function() {
    return this._touchHistory.numberActiveTouches;
  }
});

type.defineMethods({
  _updateCentroid: function() {
    var prevX, prevY;
    prevX = this.x;
    prevY = this.y;
    this.x = currentCentroidX(this._touchHistory);
    this.y = currentCentroidY(this._touchHistory);
    this.x0 += this.x - prevX;
    this.y0 += this.y - prevY;
  }
});

type.defineHooks({
  __onReject: emptyFunction,
  __onGrant: emptyFunction,
  __onRelease: emptyFunction,
  __onTouchStart: function() {
    this._updateCentroid();
  },
  __onTouchMove: function() {
    this.x = currentCentroidX(this._touchHistory);
    this.y = currentCentroidY(this._touchHistory);
    this.dx = this.x - this.x0;
    this.dy = this.y - this.y0;
    if (this.dx0 === null) {
      this.dx0 = this.dx;
      this.dy0 = this.dy;
    }
  },
  __onTouchEnd: function() {
    if (this.touchCount > 0) {
      this._updateCentroid();
    }
  }
});

module.exports = type.build();
