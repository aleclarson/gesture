// Generated by CoffeeScript 1.12.4
var LazyVar, ResponderSyntheticEvent, TouchHistory, Type, currentCentroidX, currentCentroidY, emptyFunction, isDev, ref, roundVelocity, type;

ref = require("TouchHistoryMath"), currentCentroidX = ref.currentCentroidX, currentCentroidY = ref.currentCentroidY;

ResponderSyntheticEvent = require("ResponderSyntheticEvent");

emptyFunction = require("emptyFunction");

TouchHistory = require("TouchHistory");

LazyVar = require("LazyVar");

isDev = require("isDev");

Type = require("Type");

type = Type("Gesture");

type.defineArgs({
  target: Number,
  touchHistory: TouchHistory
});

type.defineValues(function(options) {
  return {
    target: options.target,
    touchHistory: options.touchHistory,
    finished: null,
    _currentTime: 0,
    _prevTime: null,
    _lastMoveTime: null
  };
});

type.defineValues(function() {
  var x, y;
  return {
    _x: x = currentCentroidX(this.touchHistory),
    _y: y = currentCentroidY(this.touchHistory),
    _x0: x,
    _y0: y,
    _dx0: null,
    _dy0: null,
    _prevX: x,
    _prevY: y
  };
});

type.defineFrozenValues(function() {
  return (function(_this) {
    return function() {
      return {
        _dx: LazyVar(function() {
          return _this._x - _this._x0;
        }),
        _dy: LazyVar(function() {
          return _this._y - _this._y0;
        }),
        _dt: LazyVar(function() {
          return _this._currentTime - _this._prevTime;
        }),
        _vx: LazyVar(function() {
          return roundVelocity((_this._x - _this._prevX) / _this._dt.get());
        }),
        _vy: LazyVar(function() {
          return roundVelocity((_this._y - _this._prevY) / _this._dt.get());
        })
      };
    };
  })(this)();
});

type.initInstance(function() {
  this._dx.set(0);
  this._dy.set(0);
  this._dt.set(0);
  this._vx.set(0);
  return this._vy.set(0);
});

type.defineGetters({
  isActive: function() {
    return this.finished === null;
  },
  canUpdate: function() {
    return this._currentTime < this.touchHistory.mostRecentTimeStamp;
  },
  x0: function() {
    return this._x0;
  },
  y0: function() {
    return this._y0;
  },
  x: function() {
    return this._x;
  },
  y: function() {
    return this._y;
  },
  dt: function() {
    return this._dt.get();
  },
  dx: function() {
    return this._dx.get();
  },
  dy: function() {
    return this._dy.get();
  },
  dx0: function() {
    return this._dx0;
  },
  dy0: function() {
    return this._dy0;
  },
  vx: function() {
    return this._vx.get();
  },
  vy: function() {
    return this._vy.get();
  }
});

type.defineMethods({
  _updateTime: function() {
    this._prevTime = this._currentTime;
    this._currentTime = this.touchHistory.mostRecentTimeStamp;
  },
  _updateCentroid: function() {
    var dx, dy, x, y;
    x = currentCentroidX(this.touchHistory);
    y = currentCentroidY(this.touchHistory);
    dx = x - this._x;
    dy = y - this._y;
    this._x = x;
    this._y = y;
    this._x0 += dx;
    this._y0 += dy;
    this._prevX += dx;
    this._prevY += dy;
    this._dt.reset();
    this._vx.set(0);
    this._vy.set(0);
  }
});

type.defineHooks({
  __onReject: emptyFunction,
  __onGrant: emptyFunction,
  __onRelease: function(event, finished) {
    if (isDev && !this.isActive) {
      throw Error("Gesture already ended!");
    }
    this.finished = finished;
    if (this._lastMoveTime && (Date.now() - this._lastMoveTime) >= 150) {
      this._vx.set(0);
      this._vy.set(0);
    }
  },
  __onTouchStart: function(event) {
    if (this.canUpdate) {
      this._updateTime();
      this._updateCentroid();
    }
  },
  __onTouchMove: function() {
    if (!this.canUpdate) {
      return;
    }
    this._updateTime();
    this._lastMoveTime = Date.now();
    this._prevX = this._x;
    this._prevY = this._y;
    this._x = currentCentroidX(this.touchHistory);
    this._y = currentCentroidY(this.touchHistory);
    this._dx.reset();
    this._dy.reset();
    this._dt.reset();
    this._vx.reset();
    this._vy.reset();
    if (this._dx0 === null) {
      this._dx0 = this.dx;
      this._dy0 = this.dy;
    }
  },
  __onTouchEnd: function(event) {
    if (!this.canUpdate) {
      return;
    }
    if (this.touchHistory.numberActiveTouches > 0) {
      this._updateTime();
      this._updateCentroid();
    }
  }
});

module.exports = type.build();

roundVelocity = function(v) {
  if (0.05 >= Math.abs(v)) {
    return 0;
  } else {
    return v;
  }
};
