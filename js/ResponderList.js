// Generated by CoffeeScript 1.12.4
var Type, isDev, sync, type;

isDev = require("isDev");

Type = require("Type");

sync = require("sync");

type = Type("ResponderList");

type.defineArgs([Array]);

type.defineProperties({
  touchHandlers: {
    lazy: function() {
      return this._createMixin();
    }
  }
});

type.defineFrozenValues({
  _responders: function(responders) {
    return responders;
  }
});

type.defineValues({
  _activeResponder: null
});

type.defineGetters({
  _activeHandlers: function() {
    return this._activeResponder.touchHandlers;
  }
});

type.defineMethods({
  _setActiveResponder: function(responder, event) {
    var base, touchHandlers;
    if (!this._activeResponder) {
      this._activeResponder = responder;
      return true;
    }
    touchHandlers = this.touchHandlers;
    if (!touchHandlers.onResponderTerminationRequest(event)) {
      if (typeof (base = responder.touchHandlers).onResponderReject === "function") {
        base.onResponderReject(event);
      }
      return false;
    }
    touchHandlers.onResponderTerminate(event);
    this._activeResponder = responder;
    touchHandlers.onResponderGrant(event);
    return true;
  },
  _shouldRespond: function(phase, event) {
    var shouldRespond;
    if (isDev && this._activeResponder !== null) {
      throw Error("An active responder already exists!");
    }
    shouldRespond = false;
    sync.search(this._responders, (function(_this) {
      return function(responder) {
        if (!responder.touchHandlers[phase](event)) {
          return true;
        }
        shouldRespond = _this._setActiveResponder(responder, event);
        return false;
      };
    })(this));
    return shouldRespond;
  },
  _shouldCapture: function(phase, event) {
    var shouldCapture;
    shouldCapture = false;
    sync.searchFromEnd(this._responders, (function(_this) {
      return function(responder) {
        if (responder === _this._activeResponder) {
          return false;
        }
        if (!responder.touchHandlers[phase](event)) {
          return true;
        }
        shouldCapture = _this._setActiveResponder(responder, event);
        return false;
      };
    })(this));
    return shouldCapture;
  },
  _createMixin: function() {
    return (function(_this) {
      return function() {
        return {
          onStartShouldSetResponder: function(event) {
            return _this._shouldRespond("onStartShouldSetResponder", event);
          },
          onMoveShouldSetResponder: function(event) {
            return _this._shouldRespond("onMoveShouldSetResponder", event);
          },
          onStartShouldSetResponderCapture: function(event) {
            return _this._shouldCapture("onStartShouldSetResponderCapture", event);
          },
          onMoveShouldSetResponderCapture: function(event) {
            return _this._shouldCapture("onMoveShouldSetResponderCapture", event);
          },
          onResponderReject: function(event) {
            return _this._activeHandlers.onResponderReject(event);
          },
          onResponderGrant: function(event) {
            return _this._activeHandlers.onResponderGrant(event);
          },
          onResponderStart: function(event) {
            return _this._activeHandlers.onResponderStart(event);
          },
          onResponderMove: function(event) {
            if (_this._shouldCapture("onMoveShouldSetResponderCapture", event)) {
              return;
            }
            return _this._activeHandlers.onResponderMove(event);
          },
          onResponderEnd: function(event) {
            if (!_this._activeResponder) {
              return;
            }
            return _this._activeHandlers.onResponderEnd(event);
          },
          onResponderRelease: function(event) {
            _this._activeHandlers.onResponderRelease(event);
            return _this._activeResponder = null;
          },
          onResponderTerminate: function(event) {
            _this._activeHandlers.onResponderTerminate(event);
            return _this._activeResponder = null;
          },
          onResponderTerminationRequest: function(event) {
            return _this._activeHandlers.onResponderTerminationRequest(event);
          }
        };
      };
    })(this)();
  }
});

module.exports = type.build();
