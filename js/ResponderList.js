// Generated by CoffeeScript 1.12.4
var ResponderMixin, Type, isDev, sync, type;

isDev = require("isDev");

Type = require("Type");

sync = require("sync");

type = Type("ResponderList");

type.defineArgs([Array]);

type.defineFrozenValues(function(responders) {
  return {
    touchHandlers: this._createTouchHandlers(),
    _responders: responders
  };
});

type.defineValues({
  _activeResponder: null
});

type.defineGetters({
  _activeHandlers: function() {
    return this._activeResponder.touchHandlers;
  }
});

type.defineMethods({
  _createTouchHandlers: function() {
    var handler, handlers, key;
    handlers = {};
    for (key in ResponderMixin) {
      handler = ResponderMixin[key];
      handlers[key] = handler.bind(this);
    }
    return handlers;
  },
  _setActiveResponder: function(responder, event) {
    var base, touchHandlers;
    if (!this._activeResponder) {
      this._activeResponder = responder;
      return true;
    }
    touchHandlers = this.touchHandlers;
    if (!touchHandlers.onResponderTerminationRequest(event)) {
      if (typeof (base = responder.touchHandlers).onResponderReject === "function") {
        base.onResponderReject(event);
      }
      return false;
    }
    touchHandlers.onResponderTerminate(event);
    this._activeResponder = responder;
    touchHandlers.onResponderGrant(event);
    return true;
  },
  _shouldRespond: function(phase, event) {
    var shouldRespond;
    if (isDev && this._activeResponder !== null) {
      throw Error("An active responder already exists!");
    }
    shouldRespond = false;
    sync.search(this._responders, (function(_this) {
      return function(responder) {
        if (!responder.touchHandlers[phase](event)) {
          return true;
        }
        shouldRespond = _this._setActiveResponder(responder, event);
        return false;
      };
    })(this));
    return shouldRespond;
  },
  _shouldCapture: function(phase, event) {
    var shouldCapture;
    shouldCapture = false;
    sync.searchFromEnd(this._responders, (function(_this) {
      return function(responder) {
        if (responder === _this._activeResponder) {
          return false;
        }
        if (!responder.touchHandlers[phase](event)) {
          return true;
        }
        shouldCapture = _this._setActiveResponder(responder, event);
        return false;
      };
    })(this));
    return shouldCapture;
  }
});

module.exports = type.build();

ResponderMixin = {
  onStartShouldSetResponder: function(event) {
    return this._shouldRespond("onStartShouldSetResponder", event);
  },
  onMoveShouldSetResponder: function(event) {
    return this._shouldRespond("onMoveShouldSetResponder", event);
  },
  onStartShouldSetResponderCapture: function(event) {
    return this._shouldCapture("onStartShouldSetResponderCapture", event);
  },
  onMoveShouldSetResponderCapture: function(event) {
    return this._shouldCapture("onMoveShouldSetResponderCapture", event);
  },
  onResponderReject: function(event) {
    return this._activeHandlers.onResponderReject(event);
  },
  onResponderGrant: function(event) {
    return this._activeHandlers.onResponderGrant(event);
  },
  onResponderStart: function(event) {
    return this._activeHandlers.onResponderStart(event);
  },
  onResponderMove: function(event) {
    if (this._shouldCapture("onMoveShouldSetResponderCapture", event)) {
      return;
    }
    return this._activeHandlers.onResponderMove(event);
  },
  onResponderEnd: function(event) {
    if (!this._activeResponder) {
      return;
    }
    return this._activeHandlers.onResponderEnd(event);
  },
  onResponderRelease: function(event) {
    this._activeHandlers.onResponderRelease(event);
    return this._activeResponder = null;
  },
  onResponderTerminate: function(event) {
    this._activeHandlers.onResponderTerminate(event);
    return this._activeResponder = null;
  },
  onResponderTerminationRequest: function(event) {
    return this._activeHandlers.onResponderTerminationRequest(event);
  }
};
